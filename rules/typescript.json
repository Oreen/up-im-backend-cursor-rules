{
  "filePatterns": ["**/*.ts"],
  "customInstructions": [
    {
      "name": "typescript.mdc",
      "content": "# Среда кодирования\nПользователь задает вопросы о следующих языках кодирования:\n- JavaScript\n- TypeScript\n- Express.js\n\n# Структура проекта\n- core - ядро. Общая функцианальность для всех проектов компании реализуется в нем.\n- controllers - контроллеры Express.js\n- error/ApiError.ts - расширяет стандартный класс Error для ошибок\n- events - Event Bus\n- interfaces - Интерфейсы\n- middleware - Middleware Express.js\n- model - модели данных\n- routes - Router Express.js\n- service - Сервисы\n- updateScripts - скрипты миграции\n- utils - Различные функии работы со строками и массивами\n- workers - фоновые службы\n\n# Стиль кода\n- Используйте двойные кавычки для строк (за исключением случаев, когда нужно избежать экранирования)\n- Пропускайте точки с запятой (если это не требуется для устранения неоднозначности)\n- Используйте запятые в конце многострочных литералов объектов/массивов\n- Размещайте операторы else на той же строке, что и закрывающие фигурные скобки\n- Используйте фигурные скобки для многострочных операторов if\n\n# Правила TypeScript\n- Используйте TypeScript для всего нового кода\n- Предпочитайте неизменяемые данные (const, readonly)\n- Используйте необязательные операторы цепочки (?.) и нулевого объединения (??)\n\n# Использование библиотек\n- По возможности избегайте необходимости установки новых библиотек\n- Для сетевых запросов используйте axios\n- Для работы с датами используйте dayjs\n- Для работы с базой данных Mysql используйте mysql2 из core/sources/db.ts\n- Для кэширования используйте redis из core/sources/redis.ts\n\n# Соглашения об именовании\n- PascalCase: Type definitions\n- camelCase: Directory names, File names, Variables, Functions, Methods, Properties\n- UPPERCASE: Environment variables, Constants, Global configurations\n- Interface names начинаются с префикса \"i\" и PascalCase"
    }
  ]
} 